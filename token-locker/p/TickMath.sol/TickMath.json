{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014c62a6d2112f86ec3cb04a5ae2c5e4999c4a61108aea0f0f30f9db991175f9664736f6c63430008130033","sourceMap":"306:8339:62:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;306:8339:62;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014c62a6d2112f86ec3cb04a5ae2c5e4999c4a61108aea0f0f30f9db991175f9664736f6c63430008130033","sourceMap":"306:8339:62:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/uniswap-updated/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uniswap/v3-core/=lib/uniswap/v3-core/\",\":@uniswap/v3-periphery/=lib/uniswap/v3-periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-ctf/=lib/forge-ctf/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":uniswap/=lib/uniswap/\"]},\"sources\":{\"src/uniswap-updated/TickMath.sol\":{\"keccak256\":\"0x863b909368bb390cf0278fef372ca5d6f1acfeb551ba6e12ff4f2fcd5c3a588a\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fb685c9d02b0f582a125e6542a1773750a3506c946c479991bd81742d0e65c45\",\"dweb:/ipfs/QmbFHmKseMChMadpou3jU9mAGk7Busp7C4L71WmXUph47U\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@uniswap/v3-core/=lib/uniswap/v3-core/","@uniswap/v3-periphery/=lib/uniswap/v3-periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-ctf/=lib/forge-ctf/src/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","uniswap/=lib/uniswap/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/uniswap-updated/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/uniswap-updated/TickMath.sol":{"keccak256":"0x863b909368bb390cf0278fef372ca5d6f1acfeb551ba6e12ff4f2fcd5c3a588a","urls":["bzz-raw://fb685c9d02b0f582a125e6542a1773750a3506c946c479991bd81742d0e65c45","dweb:/ipfs/QmbFHmKseMChMadpou3jU9mAGk7Busp7C4L71WmXUph47U"],"license":"GPL-2.0-or-later"}},"version":1},"id":62}