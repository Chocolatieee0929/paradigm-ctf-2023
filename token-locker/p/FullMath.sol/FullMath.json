{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051da8ac64bd2a144b71c1b994dd286e81ff1b0831d97faf6f22a1377a507153864736f6c63430008130033","sourceMap":"355:4708:59:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;355:4708:59;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051da8ac64bd2a144b71c1b994dd286e81ff1b0831d97faf6f22a1377a507153864736f6c63430008130033","sourceMap":"355:4708:59:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/uniswap-updated/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uniswap/v3-core/=lib/uniswap/v3-core/\",\":@uniswap/v3-periphery/=lib/uniswap/v3-periphery/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-ctf/=lib/forge-ctf/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":uniswap/=lib/uniswap/\"]},\"sources\":{\"src/uniswap-updated/FullMath.sol\":{\"keccak256\":\"0x54b8d55acd1b5c0444425fade96e0402f09821524f5b40fb4d9a5784b805427a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8347b3f5e19ba1993428cc064ae353f71a2b5a28fb902bff3f2b6a8275f0ed4\",\"dweb:/ipfs/Qmazis72ZQxoZKKiGHS1fPPAtb6mJcXCCS5Habxtd8Jndb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@uniswap/v3-core/=lib/uniswap/v3-core/","@uniswap/v3-periphery/=lib/uniswap/v3-periphery/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-ctf/=lib/forge-ctf/src/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","uniswap/=lib/uniswap/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/uniswap-updated/FullMath.sol":"FullMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/uniswap-updated/FullMath.sol":{"keccak256":"0x54b8d55acd1b5c0444425fade96e0402f09821524f5b40fb4d9a5784b805427a","urls":["bzz-raw://b8347b3f5e19ba1993428cc064ae353f71a2b5a28fb902bff3f2b6a8275f0ed4","dweb:/ipfs/Qmazis72ZQxoZKKiGHS1fPPAtb6mJcXCCS5Habxtd8Jndb"],"license":"MIT"}},"version":1},"id":59}