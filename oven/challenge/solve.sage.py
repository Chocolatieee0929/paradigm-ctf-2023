

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_384 = Integer(384); _sage_const_0 = Integer(0)
from Crypto.Util.number import *
from pwn import *
from math import ceil
from tqdm import tqdm

io = remote("127.0.0.1", "1337")

NUMS = _sage_const_5 

def custom_hash(n):
    state = b"\x00"*_sage_const_16 
    for i in range(len(n)//_sage_const_16 ):
        state = xor(state, n[i:i+_sage_const_16 ])

    for _ in range(_sage_const_5 ):
        state = hashlib.md5(state).digest()
        state = hashlib.sha1(state).digest()
        state = hashlib.sha256(state).digest()
        state = hashlib.sha512(state).digest() + hashlib.sha256(state).digest()

    value = bytes_to_long(state)

    return value

def get_plaintext():
    io.recvuntil(b"Choice: ")
    io.sendline(b"1")
    io.recvline()
    t = int(io.recvline().split()[-_sage_const_1 ].strip())
    r = int(io.recvline().split()[-_sage_const_1 ].strip())
    io.recvline()
    p = int(io.recvline().split()[-_sage_const_1 ].strip())
    g = int(io.recvline().split()[-_sage_const_1 ].strip())
    y = int(io.recvline().split()[-_sage_const_1 ].strip())

    return (t,r), (p,g,y)

ts, rs = [], []
ps, gs, ys = [], [], []

for i in tqdm(range(NUMS)):
    (t,r), (p,g,y) = get_plaintext()

    ts.append(t)
    rs.append(r)
    ps.append(p)
    gs.append(g)
    ys.append(y)

io.close()

M = Matrix(ZZ, NUMS + _sage_const_2 , NUMS + _sage_const_2 )
BOUND = _sage_const_2 **_sage_const_384 

for i,j in zip(range(NUMS), ps):
    M[i,i] = j-_sage_const_1 

M[-_sage_const_1 ,-_sage_const_1 ] = BOUND
M[-_sage_const_2 ,-_sage_const_2 ] = _sage_const_1 

for i in range(len(rs)):
    M[-_sage_const_1 , i] = rs[i] - _sage_const_1 

for a,b,c,i in zip(gs,ys,ts,range(len(rs))):
    c = custom_hash(long_to_bytes(a) + long_to_bytes(b) + long_to_bytes(c))
    M[-_sage_const_2 , i] = c

ans = M.LLL()
flag = int(ans[_sage_const_0 ,-_sage_const_2 ])
print("pctf{" + long_to_bytes(flag).decode('utf8') + "}")

